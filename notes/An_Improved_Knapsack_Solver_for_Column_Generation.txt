Twelve pages. 2013. Authors: Klaus Jansen and Stefan Kraft
PDF of excellent quality.

The subject that I (Henrique Becker) am studying (at the year of 2015/2016) is the exact resolution of the UKP (unbounded knapsack problem) with the objective of solving the subproblems generated by the column generation approach of solving BPP/CSP (Bin Packing Problem and Cutting Stock Problem). The paper "An Improved Knapsack Solver for Column Generation" (2013, Klaus Jansen and Stefan Kraft) seemed (by the title) to be relevant to my studies. However, the paper presents a variant of the UKP, the UKPIP (the Unbounded Knapsack Problems with Inversely Proportional Profits) that's a subproblem of the Variable-Sized Bin Packing (VBP) that's a generalization of the BPP when there's the possibility of choosing between many bin sizes (on the classical BPP there's one fixed bin size for instance). The UKIPIP is a generalization of the UKP, in the sense that it allows for choosing between many knapsack sizes, and when restricted to only one knapsack size it's equivalent to the UKP. Yet, when there's many knapsack sizes to choose from, the same solution in different knapsacks will yield a diferent profit value, as the profit value of the items is scaled by the knapsack size (the smaller the knapsack size, the bigger the profit value for the same solution); and the solution is a multiset of items and the one knapsack choosen to store these items. The paper seems to focus on approximation methods to solve the UKPIP and the other two variants of it (the bounded one, BKPIP and the 0-1 one, 0-1 KPIP). So the subject of the paper (approximation algorithms for a variant of the UKP as subproblem of a variant of the BPP) is outside our area of interest (exact algorithms for the classical UKP as a subproblem of the classical BPP).

I don't have done a deep analysis of the problem (I skimmed through the paper and wrote this note on 2~4 hours) but seems that an efficient exact algorithm for the UKPIP is trivial. The algorithm would consist of: solving the problem for the biggest knapsacks size, using dynamic programming, as it was an instance of the UKP (i.e. ignoring all other knapsack sizes); using the item multisets already computed and stored on this process, find what would be the optimal solution if we solved the UKP again, for each other knapsack size present on the UKPIP instance (that were ignored at first); scale the profit value of each selected item multiset by its knapsack size; the optimal solution for UKPIP will be the one where the pair (knapsack size and item multiset) have the biggest scaled profit value. In other words, the subproduct of solving the UKP for the biggest knapsack size, that's a list/vector of UKP optimal solutions for all smaller capacities, can be used to find the UKP optimal solution for each other smaller knapsack size with almost no extra effort. The optimal solution of the UKPIP is simply the best solution between all those UKP solutions (after the scaling) and its associated knapsack size.


