\chapter{Prior Work}

Talks about the fact that in the past no differentiation was made between the KP variants (all were refered as a/the KP)

the gilmore and gomore had given a very efficient algorithm
harold greenberg improved the method but presented no experimental evidence for this



%This generated distortions and abandoned paradigms. The whole shift from dynamic programming methods to B\&B methods can be associated with the tests being made over ever-increasing instances; randomly generated with little or some correlation between profits and weights; and the use of naive dynamic programs; the shift of PYAsUKP to revisit dynamic programming can easily be correlated with the evolution of the artificial instances generated to be difficult to solve by B\&B while small (on capacity and number of items); the DP methods began to shine again, as the instances had small dimensions and a structure that made them hard to solve by B\&B but not so much by a good (non-naive) DP algorithm. The UKP5 is only the last part of this history.

%The paper ``A Finite Renewal Algorithm for the Knapsack and Turnpike Models'' and http://pubsonline.informs.org/doi/abs/10.1287/opre.18.2.306 were behind a paywall and the paper ``A better ...'' said to have a better algorithm anyway. 

B\&B methods appear, and begin to claim that DP isn't efficient, they don't compare with the DP methods, only between each other, using some distributions and without motivation or real world instances

% MTU1 and MTU2 papers:
The algorithm MTU1 was proposed at paper \cite{gen_uni_knap_prob}, with the name of KP1 at the time (we will refer to this paper as the `MTU1 paper'). % old paper of MTU1
To the author's knowledge, the MTU1 paper was the only paper to present experimental results comparing the B\&B and DP methods, before PYAsUKP paper, in 2009\cite{pya}.
Unfortunately, for today standards, the instances used for the comparison were very small (what's understandable considering the paper's publishing date). 
The numbers of items items used were 25, 50 and 100 for instance; the weights (and profits) had values between 11 and 110 (in the case of the profits 120); the knapsack capacity was chosen between \(0.2 sum_{i \in n}{w_i}\) and \(sum_{i \in n}{w_i}\) (the capacity value isn't proportionally a problem, only absolutely); the distributions used were uncorrelated and weakly correlated (\(p_i = w_i + \alpha\), where \(\alpha\) was randomly choosen from -10 and 10 following an uniform distribution).

The comparison was between KP1 (MTU1), the dynamic programming algorithm called `periodic step-off' from \cite{gg66} (that we will call G.G., for short), and two B\&B algorithms for the 0-1 KP (for which the UKP instances were tranformed in 0-1 KP instances). The best results were from MTU1, and the second best from the G.G.  algorithm. However, the instances were too small to draw strong conclusions, and the relative difference between G.G. and MTU1 average times wasn't even an order of magnitude apart. The G.G. algorithm was about four times slower than MTU1 in the instances with (\(n = 25\); about two or three times slower in the instances with \(n = 50\)); and less than two times slower in instances with \(n = 100\). This trend could indicate that for big instances, G.G. algorithm would have better times than MTU1 (G.G. algorithm would have a big constant multiplier in better average-case assimptotic complexity).

%The MTU1 paper \cite{gen_uni_knap_prob} also makes an indirect comparison with Cabot's B\&B algorithm. The MTU1 paper uses the dataset described in Cabot's paper\cite{cabot}, and arrives at the conclusion Cabot's algorithm is clearly dominated by MTU1. The instance dimensions are only a little different to the ones used in their experiment described above (number of items up to 80, only uncorrelated distribution).

The experiments described above were used by the authors on another paper\cite{large_mtu2} to state that ``The most efficient algorithms for the exact solution of UKP [...] consist of two main steps: Step 1. Sort the item types according to (5). Step 2. Find the optimal solution through branch-and-bound.''. What established B\&B as most efficient approach for the UKP. This new paper introduced MTU2 (and we will refer to it as the `MTU2 paper').

The MTU2 algorithm was designed for very large instances (up to 250,000 items). Only sorting the whole item's list was already computationally expensive, and the solutions often involved only the most efficient items. The MTU2 main feature was grouping and sorting only the \(k = max(100, n/100)\) most efficient items (called core problem), and calling MTU1 over it. If the optimal solution of the core problem was proven optimal for the original problem, the algorithm stopped. Otherwise, the tentative solution was used as bound to remove dominated items (that could be proven to not contribute to the solution), and it added the \(k\) most efficient items outside the core problem to it, restarting the process. 

The algorithms comparison included only MTU1 and MTU2. The datasets used in the paper were large, but artificial and abundant in dominated items. A more detailed analisys of the datasets and the experiment setting is available at Section \ref{XXX}. The MTU2 was clearly the better algorithm for the chosen datasets.

MTU2 was adopted for subsequent paper as the baseline for testing new algorithms for UKP. The author credit this to many factors, such as: the code of MTU2 was freely available; the algorithm was well and thoroughly explained in Martello and Toth publications; it presented empyrical evidence of dominating other methods, and therefore, comparing with it would remove the necessity of comparing to many other algorithms; its description stated that it was designed for very large instances. However, MTU2 don't dominate completely MTU1, it simply was better for the chosen instances (that were choosen to exactly to evidence this). Instances where the MTU2 needs to repeat the process of adding items to the core problem many times can be more easily solved by MTU1 than by MTU2. Unfortunately, the works that followed choose to compare only against MTU2.

CITE BABYEV BUT SAY THAT THEIR EXPERIMENTS WILL BE DISCUSSED FURTHER IN THE ISTANCES SECTIO

EDUK, and EDUK2 follow, they only test against themselves and B\&B methods using instances that were made to be hard for B\&B , do not implement the Fred Glover algorithm and don't adapt MTU2 to using 64 bits (nor test againt both MTU1 and MTU2),
Fred Glover algorithm was not implemented by time reasons, and ould make a nice addition to any new comparison between UKP solving methods, yet, the author has no idea of their real performance, as the experiments they used to compare themselves to MTU1/2 had some flaws.

%That the whole UKP literature has many problems: David Johnson - Pitfall 4 "Start by using randomly generated instances to evaluate the behaviour of algorithms, but end up using algorithms to investigate the properties of randomly-generated instances."; David Johnson "[...] problems without applications do not have real-world instances, so the experimenter is left to invent (and justify) test data in a vacuum. And referees may well question the testing of code for algorithms that will never be used in practice." (p. 5). We are researching instances that are hard for UKP, not that this has a utility on itself.
%An unfortunate side-effect of this was that DP algorithms weren't used 

% A LITTLE OF CSP HISTORY TOO
\section{Cutting Stock}

% BLOCKQUOTE BELOW
 This corresponds to widely-used practices and general beliefs expressed in the literature. Usually, in the context of an LP- based branch-and-bound algorithm, where the LP relaxation is solved using column generation, cutting planes are carefully selected in order to avoid the destruction of the structure of the pricing problem. This viewpoint is shared by numerous authors. Barnhart, Hane, and Vance [BHV00], for example, mention as one of the main contributions of their branch-and-price-and-cut algorithm ``a pricing problem that does not change even as cuts are added, and similarly, a separation algorithm that does not change even as columns are added.'' (BELOV, page 3)

About the pricing problem with cuts. ``It is much more difficult than the linear knapsack problem for column generation arising when no cuts are added in the LP.'' (BELOV, page 26)

% The paragraph below is only about 2D-2CP?
%``The general-purpose cuts considered in this work make the pricing problem extremely complicated and much implementation effort is required. The question arises, whether any other classes of cuts, which do not complicate the pricing problem, e.g., cover inequalities in 2D-2CP, can provide a comparable contribution.'' (p. 46)

% tell about the filthy lie

% maybe this goes in another section
%	timeline: DP -> huge random instances -> B\&B is better (no empiric evidence) -> instances that are hard for B\&B (linear distribution) -> PYAsUKP is better than B\&B in instances designed to be hard to solve by it (in fact any DP non-naive DP solution would have results better than B\&B methods only, like MTU1 and MTU2). also, using MTU2 instead of MTU1 shows a lack of understanding of the methods. MTU2 was developed for very large random instances, not for relatively small and hard (distribution-wise) instances


% MAYBE ADD
% The subject that I (Henrique Becker) am studying (at the year of 2015/2016) is the exact resolution of the UKP (unbounded knapsack problem) with the objective of solving the subproblems generated by the column generation approach of solving BPP/CSP (Bin Packing Problem and Cutting Stock Problem). The paper "An Improved Knapsack Solver for Column Generation" (2013, Klaus Jansen and Stefan Kraft) seemed (by the title) to be relevant to my studies. However, the paper presents a variant of the UKP, the UKPIP (the Unbounded Knapsack Problems with Inversely Proportional Profits) that's a subproblem of the Variable-Sized Bin Packing (VBP) that's a generalization of the BPP when there's the possibility of choosing between many bin sizes (on the classical BPP there's one fixed bin size for instance). The UKIPIP is a generalization of the UKP, in the sense that it allows for choosing between many knapsack sizes, and when restricted to only one knapsack size it's equivalent to the UKP. Yet, when there's many knapsack sizes to choose from, the same solution in different knapsacks will yield a diferent profit value, as the profit value of the items is scaled by the knapsack size (the smaller the knapsack size, the bigger the profit value for the same solution); and the solution is a multiset of items and the one knapsack choosen to store these items. The paper seems to focus on approximation methods to solve the UKPIP and the other two variants of it (the bounded one, BKPIP and the 0-1 one, 0-1 KPIP). So the subject of the paper (approximation algorithms for a variant of the UKP as subproblem of a variant of the BPP) is outside our area of interest (exact algorithms for the classical UKP as a subproblem of the classical BPP).
