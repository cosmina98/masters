\chapter{Prior Work}

It's important to note that the name ``unbounded knapsack problem'' is more recent than the problem itself. To the best of the author's knowledge, this name was used by the first time in \cite{mtu2}. Earlier, papers simply refered to `a' or `the' knapsack problem(s), there was no worry about specifying what variant of the problem was being refered. An earlier paper from the same author tackled both UKP and BKP \cite{mtu1} and called them, respectively, the General Unconstrained Knapsack Problem (GUKP) and General Constrained Knapsack Problem (GCKP). In the paper, the adjective unidimensional was also used to characterize both variants. More recently, the term UKP seems to be accepted as norm, also unidimensional is considered the default and the term multi-dimensional is used to differ from it. A researcher making a literature review about a specific variant of the knapsack problem should be aware of such caveat.

This literature review starts with \cite{gg-61}, when the \emph{column generation} approach was proposed. The main utility of the column generation approach was to avoid the existence of an exponential number of variables when solving the tightest linear programming model of BPP and CSP. The relationship between UKP and BPP/CSP was alredy superficially described at Section \ref{sec:motivation}, and its technical details will be described at Section \ref{sec:csp_ukp_inst}. The UKP isn't solved, only it's said that ``the auxiliary problem will be of the integer programming variety, but of such a special type (the `knapsack' type) that it is solvable by several methods''\cite[p.~2]{gg-61}. Two years later, in \cite{gg-63}, the same authors proposed an specific algorithm for UKP, and experiments solving BPP and CSP instances were executed. Some findings of this experiments will be discussed in Section \ref{sec:csp_ukp_inst} and \ref{sec:csp_experiments}.

In \cite{gg-66}, they focused the one-dimensional and two-dimensional knapsack problems related to BPP and CSP. In this paper, the algorithm for UKP that was first described at \cite{gg-63} is discussed more profoundly. The author of this work reinvented the algorithm from \cite{gg-66} and published a paper about it while thinking it was novel \cite{sea2016}, it apologizes to the academic and scientific community for this overlook. Further information about the algorithms of \cite{gg-66} and \cite{sea2016} in Section \ref{sec:dp_algs}. An small improvement for the algorithm of \cite{gg-66} was proposed in \cite{green_improv}. The improved algorithm was implemented by the author of this work and its results can be seen in Section \ref{sec:pya_exp}.

The papers \cite{cabot} and \cite{turnpike} were published shortly after. Both papers are behind a paywall and the author hadn't access to them. However, the algorithm from \cite{cabot} was compared indirectly by \cite{mtu1} (that will be discussed in the sequence). The comparison found that the the algorithm from \cite{cabot} was dominated by the algorithm proposed in \cite{mtu1}. In \cite{green_improv}, is implied that the proposed algorithm is an improvement over the algorithm from \cite{turnpike}. However, the author think that both conclusions should be taken with a grain of salt. In \cite{mtu1}, empirical evidence was presented, but using datasets that are considered small by today standards and that used an item's distribution that the author has reservations about (see Section \ref{sec:inst_uncorrelated}). In \cite{green_improv}, the claims are backed up by theoretical reasoning, but empirical evidence shown in Section \ref{sec:pya_exp} revealed that the improvement had some unpredicted behavior over some instance datasets. The author thinks that revisiting such abandoned algorithms would be interesting, but it wasn't a priority in this work.

%This generated distortions and abandoned paradigms. The whole shift from dynamic programming methods to B\&B methods can be associated with the tests being made over ever-increasing instances; randomly generated with little or some correlation between profits and weights; and the use of naive dynamic programs; the shift of PYAsUKP to revisit dynamic programming can easily be correlated with the evolution of the artificial instances generated to be difficult to solve by B\&B while small (on capacity and number of items); the DP methods began to shine again, as the instances had small dimensions and a structure that made them hard to solve by B\&B but not so much by a good (non-naive) DP algorithm. The UKP5 is only the last part of this history.

%The paper ``A Finite Renewal Algorithm for the Knapsack and Turnpike Models'' and http://pubsonline.informs.org/doi/abs/10.1287/opre.18.2.306 were behind a paywall and the paper ``A better ...'' said to have a better algorithm anyway. 

%B\&B methods appear, and begin to claim that DP isn't efficient, they don't compare with the DP methods, only between each other, using some distributions and without motivation or real world instances

% MTU1 and MTU2 papers:
In the 70's, there was a shift of attention from the DP approach to the B\&B approach.
The first algorithms using this approach seem to be the Cabot's enumeration method \cite{cabot} and the MTU1 algorithm \cite{mtu1}, both cited last paragraph.

The algorithm MTU1 was proposed in \cite{mtu1}, with the name of KP1 at the time (we will refer to this paper as the `MTU1 paper'). % old paper of MTU1 %To the author's knowledge, the MTU1 paper was the only paper to present experimental results comparing the B\&B and DP methods, before PYAsUKP paper, in 2009\cite{pya}.
Unfortunately, for today standards, the instances used for the comparison were very small (what's understandable considering the paper's publishing date). 
The numbers of items items used were 25, 50 and 100 for instance; the weights (and profits) had values between 11 and 110 (in the case of the profits 120); the knapsack capacity was chosen between \(0.2 \sum_{i \in n}{w_i}\) and \(\sum_{i \in n}{w_i}\) (the capacity value isn't proportionally a problem, only absolutely); the distributions used were uncorrelated and weakly correlated (\(p_i = w_i + \alpha\), where \(\alpha\) was randomly choosen from -10 and 10 following an uniform distribution).

The comparison was between KP1 (MTU1), the dynamic programming algorithm called `periodic step-off' from \cite{gg-66} (that we will call G.G., for short), and two B\&B algorithms for the 0-1 KP (for which the UKP instances were tranformed in 0-1 KP instances). The best results were from MTU1, and the second best from the G.G.  algorithm. However, the instances were too small to draw strong conclusions, and the relative difference between G.G. and MTU1 average times wasn't even an order of magnitude apart. The G.G. algorithm was about four times slower than MTU1 in the instances with \(n = 25\); about two or three times slower in the instances with \(n = 50\); and less than two times slower in instances with \(n = 100\). This trend could indicate that for big instances, G.G. algorithm would have better times than MTU1 (e.g. the G.G. algorithm could have a costly initialization process, but a better average-case assimptotic complexity).

%The MTU1 paper \cite{gen_uni_knap_prob} also makes an indirect comparison with Cabot's B\&B algorithm. The MTU1 paper uses the dataset described in Cabot's paper \cite{cabot}, and arrives at the conclusion Cabot's algorithm is clearly dominated by MTU1. The instance dimensions are only a little different to the ones used in their experiment described above (number of items up to 80, only uncorrelated distribution).

The experiments described above were used by the authors on another paper to state that ``The most efficient algorithms for the exact solution of UKP [...] consist of two main steps: Step 1. Sort the item types according to (5). Step 2. Find the optimal solution through branch-and-bound.''\cite{mtu2}. What established B\&B as most efficient approach for the UKP. This new paper introduced MTU2 (and we will refer to it as the `MTU2 paper').

The MTU2 algorithm was designed for very large instances (up to 250,000 items). Only sorting the whole item's list was already computationally expensive for the period, and the solutions often involved only the most efficient items. The MTU2 main feature was grouping and sorting only the \(k = max(100, \frac{n}{100})\) most efficient items, and calling MTU1 over them. The instance of UKP comprised of this reduced item's list was called `core problem'. If the optimal solution of the core problem was proven to be optimal for the original problem, the algorithm stopped. Otherwise, the core problem's optimal solution was used as a bound to remove dominated items, and it added the \(k\) most efficient items outside the core problem to it, restarting the process. 

The algorithms' comparison included only MTU1 and MTU2. The datasets used in the paper were large, but artificial and abundant in dominated items. A more detailed analisys of one of the datasets and the experiment setting is available at Section \ref{sec:martello_uncorrelated}. The MTU2 was clearly the better algorithm for the chosen datasets.

MTU2 was adopted for subsequent paper as the baseline for testing new algorithms for UKP. The author credit this to many factors, such as: the code of MTU2 was freely available; the algorithm was well and thoroughly explained in Martello and Toth publications; it presented empyrical evidence of dominating other methods, and therefore, comparing with it would remove the necessity of comparing to many other algorithms; its description stated that it was designed for very large instances. However, MTU2 don't completely dominate MTU1, it simply was better for the chosen instances (that were choosen with the purpose to evidence this). Instances where the MTU2 needs to repeat the process of adding items to the core problem many times can be more easily solved by MTU1 than by MTU2. Unfortunately, the works that followed choose to compare only against MTU2.

EDUK (\emph{Efficient Dynamic programming for the Unbounded Knapsack problem}), a novel DP algorithm for UKP, is proposed in \cite{eduk}. EDUK is very different than the DP algorithms before it, and its main features are the application of threshold dominance (proposed in the same paper), and the use of an sparse representation of the iteration domain. This last feature was implemented using lazy lists, reason for which EDUK was coded in the functional language OCaml. EDUK is strongly based in the ideas first discussed at \cite{algo_tech_cut}.

In \cite{eduk}, the paper's authors critisize the item's distributions used by the previous papers, specially the uncorrelated distribution. Criticisms the author of this work shares, and are more discussed at Section \ref{sec:inst_uncorrelated}. However, the solution given for this problem are new datasets of artificial instances. The new datasets don't have simple dominated items, or small super efficient items, as the previous datasets, and one of them don't even have any collective dominated items. The change in the choice of item's distribution benefit DP methods (and consequently EDUK), that are better suited for such kind of instances. When the new datasets are used, the comparison between MTU2 and EDUK shows that MTU2 is strongly dominated by EDUK.

The weakly and strong correlated distributions are also used, but varying the value of \(w_{min}\). For those instances, MTU2 dominate EDUK when the weight of the smallest item is close to one, but MTU2's times grows much faster than EDUK's times when \(w_{min}\) is increased.

Only one comparison is made against another DP algorithm. The DP algorithm used seems to be a naive DP algorithm with a preprocessing phase that removes simple dominance. The comparison use a completely different dataset of small instances, in a effort to take in account real-world applications of UKP, as the ones provenient from the solution of BPP and CSP with column generation. The average times in this comparison are smaller than 0.1 seconds, and the difference between the average times of EDUK and the naive DP are about 20\% (with EDUK being faster).

EDUK2 is an improvement of EDUK proposed in \cite{pya}. The main improvement brought up by EDUK2 is the hybridization of EDUK with the B\&B approach. A B\&B preprocessing phase was added to EDUK, if it solved the instance in less than a parametrized number of nodes, then EDUK is never executed; otherwise, the bounds computed by the B\&B phase are used to reduce the number of items, before executing EDUK. The paper also proposes a new bound for a subset of the strongly correlated instances (the SAW instances), that's the tightest bound known for such instances. Comparisons are made with EDUK and MTU2. EDUK2 is clearly the winner, but the average solution times of the methods are some seconds, or less than a second. The experiments are then remade using the same distributions with bigger coefficients. MTU2 has integer overflow problems and is left of the comparison, between EDUK and EDUK2, EDUK2 has the better results, as expected. 

Both \cite{eduk} and \cite{pya} cite \cite{babayev}, which presents an algorithm for solving UKP using the Consistency Approach (CA). The algorithm described in \cite{babayev} was tested against MTU2 and had better results, but the instances used for the experiment make difficult to have an idea what would be its performance using more recent datasets (see Section \ref{sec:babayev_uncorrelated} for further discussion). The CA wasn't novel at time, being already discussed at \cite[p.~241]{garfinkel} and \cite{on_equivalent_greenberg}. However, the algorithm proposed in \cite{babayev} had performance as a priority, while the other two works treated applying CA to UKP as an interesting theoretical problem. As the authors of \cite{eduk} and \cite{pya}, the author of this work tried to reach the authors of \cite{babayev} for a copy of the code, but had not obtained success. The author of this work suggest the implementation and comparison of this algorithm as a future work.

Before ending this literature review, the author would like to discuss the chapters about UKP in the following textbooks: \cite{tchu} and \cite{garfinkel}. Those textbooks are specially relevant because they are cited by many of the papers presented at this section. The chapter about the UKP in \cite[p.~311]{hu} has a good introduction about the problem, the simplest DP method for solving it, and the basics of the periodicity.

The chapter about UKP in \cite[p.~214]{garfinkel} has an extensive bibliographical review of the works about UKP that predates it (1972), what is very relevant as the name UKP was only conventioned some years after. The chapter also discuss profoundly many of the approachs used to solve UKP in that period, yet making heavy use of mathmatical notation. The author of this work only have one criticism about the chapter. In the Section 6.4 of the book, a DP algorithm is presented as the last of a series of improvements over the naive DP algorithm. However, if we check the chapter notes, there's the comment ``6.4: The recursion of this section is based on Gilmore and Gomory (1966). See Exercise 21 for a variation that will be more efficient for some data sets.''. The algorithm presented in section 6.4 was a version of the algorithm in \cite{gg-66} with \emph{some} of its main optimizations removed, and in exercise 21 is expected of the reader to recreate \emph{one} of those optimizations based in hints given at the exercise. The author of this work believes that this fact can have been unnoticed by previous authors that cited the work. The book didn't featured the exercises' answers.

% A LITTLE OF CSP HISTORY TOO
%\section{Cutting Stock}

% BLOCKQUOTE BELOW
% This corresponds to widely-used practices and general beliefs expressed in the literature. Usually, in the context of an LP- based branch-and-bound algorithm, where the LP relaxation is solved using column generation, cutting planes are carefully selected in order to avoid the destruction of the structure of the pricing problem. This viewpoint is shared by numerous authors. Barnhart, Hane, and Vance [BHV00], for example, mention as one of the main contributions of their branch-and-price-and-cut algorithm ``a pricing problem that does not change even as cuts are added, and similarly, a separation algorithm that does not change even as columns are added.'' (BELOV, page 3)

%About the pricing problem with cuts. ``It is much more difficult than the linear knapsack problem for column generation arising when no cuts are added in the LP.'' (BELOV, page 26)

% The paragraph below is only about 2D-2CP?
%``The general-purpose cuts considered in this work make the pricing problem extremely complicated and much implementation effort is required. The question arises, whether any other classes of cuts, which do not complicate the pricing problem, e.g., cover inequalities in 2D-2CP, can provide a comparable contribution.'' (p.~46)

% maybe this goes in another section
%	timeline: DP -> huge random instances -> B\&B is better (no empiric evidence) -> instances that are hard for B\&B (linear distribution) -> PYAsUKP is better than B\&B in instances designed to be hard to solve by it (in fact any DP non-naive DP solution would have results better than B\&B methods only, like MTU1 and MTU2). also, using MTU2 instead of MTU1 shows a lack of understanding of the methods. MTU2 was developed for very large random instances, not for relatively small and hard (distribution-wise) instances


% MAYBE ADD
% The subject that I (Henrique Becker) am studying (at the year of 2015/2016) is the exact resolution of the UKP (unbounded knapsack problem) with the objective of solving the subproblems generated by the column generation approach of solving BPP/CSP (Bin Packing Problem and Cutting Stock Problem). The paper "An Improved Knapsack Solver for Column Generation" (2013, Klaus Jansen and Stefan Kraft) seemed (by the title) to be relevant to my studies. However, the paper presents a variant of the UKP, the UKPIP (the Unbounded Knapsack Problems with Inversely Proportional Profits) that's a subproblem of the Variable-Sized Bin Packing (VBP) that's a generalization of the BPP when there's the possibility of choosing between many bin sizes (on the classical BPP there's one fixed bin size for instance). The UKIPIP is a generalization of the UKP, in the sense that it allows for choosing between many knapsack sizes, and when restricted to only one knapsack size it's equivalent to the UKP. Yet, when there's many knapsack sizes to choose from, the same solution in different knapsacks will yield a diferent profit value, as the profit value of the items is scaled by the knapsack size (the smaller the knapsack size, the bigger the profit value for the same solution); and the solution is a multiset of items and the one knapsack choosen to store these items. The paper seems to focus on approximation methods to solve the UKPIP and the other two variants of it (the bounded one, BKPIP and the 0-1 one, 0-1 KPIP). So the subject of the paper (approximation algorithms for a variant of the UKP as subproblem of a variant of the BPP) is outside our area of interest (exact algorithms for the classical UKP as a subproblem of the classical BPP).
