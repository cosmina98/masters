\section{Algorithms from the literature}
\label{sec:prior_work}



% BELOW HERE IS THE OLD MATERIAL



This literature review starts with~\cite{gg-61}, when the \emph{column generation} approach was proposed.
% TODO: put the phrase from introduction here
%The main utility of the column generation approach was to avoid the existence of an exponential number of variables when solving the tightest linear programming model of BPP and CSP.
%The relationship between the UKP and the BPP/CSP was already briefly described at Section~\ref{sec:motivation}, and its technical details will be described at Section~\ref{sec:csp_ukp_inst}.
%The UKP is not solved, it is only said that ``the auxiliary problem will be of the integer programming variety, but of such a special type (the `knapsack' type) that it is solvable by several methods''~\cite[p.~2]{gg-61}.
%Two years later, in~\cite{gg-63}, the authors proposed a specific algorithm for the UKP, and experiments solving BPP and CSP instances were executed.
%Some findings of this experiments will be discussed in Sections~\ref{sec:csp_ukp_inst} and~\ref{sec:csp_experiments}.

%In this paper, the algorithm for UKP that was first described at~\cite{gg-63} is discussed more profoundly.
%In~\cite{gg-66}, the one-dimensional and two-dimensional knapsack problems related to BPP and CSP were discussed.
%The author of this thesis reinvented one algorithm from~\cite{gg-66} and published a paper about it, believing it was novel~\cite{sea2016}, thus, he apologizes to the academic and scientific community for such disregard.
%Further information about the algorithms of~\cite{gg-66} and~\cite{sea2016} can be found in Section~\ref{sec:dp_algs}.
A small improvement over the algorithm of~\cite{gg-66} was proposed in~\cite{green_improv}.
%The author implemented the improved algorithm and its results can be seen in Section~\ref{sec:pya_exp}.

% MTU1 and MTU2 papers:
In the 1970's, there was a shift of attention from the DP approach to the B\&B approach.
The first algorithms using this approach seem to be the Cabot's enumeration method~\cite{cabot} and the MTU1 algorithm~\cite{mtu1}.

MTU1 was proposed in~\cite{mtu1}, with the name of KP1 at the time (we will refer to this paper as the `MTU1 paper'). % old paper of MTU1 %To the author's knowledge, the MTU1 paper was the only paper to present experimental results comparing the B\&B and DP methods, before PYAsUKP paper, in 2009\cite{pya}.
Unfortunately, by current standards, the instances used in the comparison were very small (which is understandable considering the paper publishing date). 
The numbers of items used were 25, 50 and 100, for instance; the weights (and profits) had values between 11 and 110 (in the case of the profits, 120); the knapsack capacity was chosen between~\(0.2 \sum_{i \in n}{w_i}\) and~\(\sum_{i \in n}{w_i}\); the distributions used were uncorrelated and weakly correlated (\(p_i = w_i + \alpha\), where~\(\alpha\) was randomly chosen from -10 and 10 following an uniform distribution).

The comparison presented in~\cite{mtu1} was between KP1 (MTU1), the dynamic programming algorithm called `periodic step-off' from~\cite{gg-66}, that we will call G.G. for short, and two B\&B algorithms for the 0-1 KP (for which the UKP instances were transformed in 0-1 KP instances).
The best results were from MTU1, and the second best from the G.G. algorithm.
However, the instances were too small to draw strong conclusions, and the relative difference between G.G. and MTU1 average times was not even one order of magnitude apart.
The G.G. algorithm was about four times slower than MTU1 in the instances with~\(n = 25\); about two or three times slower in the instances with~\(n = 50\); and less than two times slower in instances with~\(n = 100\).
This trend could indicate that for big instances, the G.G. algorithm would have better times than MTU1 (e.g. the G.G. algorithm could have a costly initialization process but a better average-case asymptotic complexity).

The MTU2 algorithm was designed for large instances (up to 250,000 items).
Only sorting the items list was already computationally expensive for the period, and the solutions often involved only the most efficient items.
The MTU2 main feature was grouping and sorting only the~\(k = max(100, \frac{n}{100})\) most efficient items, and calling MTU1 over them.
The UKP instance consisting of this reduced items list and the original knapsack capacity was called `tentative core problem'.
If the optimal solution of the tentative core problem was proven to be optimal for the original problem, the algorithm stopped.
Otherwise, the optimal solution of the tentative core problem was used as a lower bound to remove dominated items.
After this, the~\(k\) most efficient items outside the tentative core problem were added to it, restarting the process. 

The algorithms comparison included only MTU1 and MTU2.
The datasets used in the paper were large, but artificial and abundant in dominated items.
The MTU2 was clearly the best algorithm for the chosen datasets.

MTU2 was adopted by the subsequent works as the baseline for testing new algorithms for the UKP.
We believe this happened due to many factors, such as: the code of MTU2 was freely available; the algorithm was well and thoroughly explained in Martello and Toth's publications; it presented empirical evidence of dominating other methods and, consequently, comparing with it would remove the necessity of comparing to many other algorithms; the description of MTU2 stated that it was designed for large instances.
However, MTU2 does not completely dominate MTU1, it simply was better for the chosen instances (that were chosen with the purpose of evidencing this).
Instances in which the MTU2 needs to repeat the process of adding items to the tentative core problem many times can be more easily solved by MTU1 than by MTU2.
Unfortunately, the works that followed chose to compare their algorithms only against MTU2.

EDUK (\emph{Efficient Dynamic programming for the Unbounded Knapsack problem}), a novel DP algorithm for the UKP, was proposed in a conference paper~\cite{ukp_new_results} and then presented in a journal paper~\cite{eduk}.
EDUK is very different from the previous DP algorithms, and its main features are the application of threshold dominance (proposed in the same paper), and the use of a sparse representation of the iteration domain.
This last feature was implemented by using lazy lists, mainly because EDUK was implemented in the functional language OCaml.
EDUK is strongly based on the ideas first discussed in~\cite{algo_tech_cut}.

In~\cite{eduk}, the authors criticize the item distributions used in previous papers, especially the uncorrelated distribution.
The author of this thesis agrees with this criticism, further discussion can be found in Section~\ref{sec:inst_uncorrelated}.
However, the solution given for this problem were new datasets of artificial instances.
The new datasets do not have simple dominated items, or small efficient items, as the previous datasets, and one of them does not even have any collective dominated items.
The change in the choice of items distributions benefits DP methods (and consequently EDUK), which are better suited for such kind of instances.
When the new datasets are used, the comparison between MTU2 and EDUK shows that the average times of MTU2 are strongly dominated by the ones of EDUK.

The weakly and strongly correlated distributions are also used in \cite{eduk}, but varying the value of~\(w_{min}\).
For those instances, MTU2 dominates EDUK when the weight of the smallest item is close to one, but MTU2 times grow much faster than EDUK times when~\(w_{min}\) is increased.
Only one comparison is made against another DP algorithm.
The DP algorithm used seems to be a na{\"i}ve DP algorithm with a preprocessing phase that removes simple dominance.
The comparison uses a completely different dataset of small instances, in an effort to take into account real-world applications of the UKP, as the ones provenient from solving BPP and CSP with column generation.
The average run times in this comparison are smaller than 0.1 seconds, and the difference between the average times of EDUK and the naive DP are about 20\% (with EDUK being faster).

EDUK2 is an improvement of EDUK proposed in~\cite{pya}.
The main improvement brought up by EDUK2 is the hybridization of EDUK with the B\&B approach.
A B\&B preprocessing phase was added to EDUK.
If it solves the instance using less than a parametrized number of nodes, then EDUK is never executed; otherwise, the bounds computed in the B\&B phase are used to reduce the number of items before EDUK execution and in intervals during its execution.
The paper also proposes a new bound for a subset of the strongly correlated instances (the SAW instances), which that is the tightest bound known for such instances.
Comparisons are performed with EDUK and MTU2.
EDUK2 is clearly the winner, but the average solution times of the methods are few seconds, or less than a second.
The experiments are then remade using the same distributions with larger coefficients.
MTU2 has integer overflow problems and is left out of the comparison.
Between EDUK and EDUK2, EDUK2 has the best results, as expected. 

% TODO: summarize paragraph below in one or two lines
Both~\cite{eduk} and~\cite{pya} cite~\cite{babayev}, which presents an algorithm for solving the UKP using the Consistency Approach (CA).
The algorithm described in~\cite{babayev} was tested against MTU2 and had better times, but the instances used in the experiment make it difficult to have an idea of what would be its performance using more recent datasets (see Section~\ref{sec:babayev_uncorrelated} for further discussion).
The CA was already discussed in~\cite{on_equivalent_greenberg}.
However, the algorithm proposed in~\cite{babayev} considered performance as a priority, different from previous works that treated applying CA to the UKP as an interesting theoretical problem.
As the authors of~\cite{eduk} and~\cite{pya}, we tried to obtain a copy of the code from the authors of~\cite{babayev}, but did not obtain success.
The author of this thesis suggests the implementation and comparison of this algorithm as a future work.

% This corresponds to widely-used practices and general beliefs expressed in the literature. Usually, in the context of an LP- based branch-and-bound algorithm, where the LP relaxation is solved using column generation, cutting planes are carefully selected in order to avoid the destruction of the structure of the pricing problem. This viewpoint is shared by numerous authors. Barnhart, Hane, and Vance [BHV00], for example, mention as one of the main contributions of their branch-and-price-and-cut algorithm ``a pricing problem that does not change even as cuts are added, and similarly, a separation algorithm that does not change even as columns are added.'' (BELOV, page 3)

