require 'batch_experiment/extractor'

module BatchExperiment
  module FirstLineExtractor
    extend Extractor
    def self.names
      ['first line', 'ext_time', 'ext_mem']
    end

    def self.extract_from_lines(lines)
      [ (lines[0] or ''),
        Extractor.get_field(lines, 'ext_time'),
        Extractor.get_field(lines, 'ext_mem')
      ]
    end
  end

  module IdExtractor
    extend Extractor
    def self.names
      ['content']
    end

    def self.extract(content)
      [content]
    end
  end

  module WcExtractor
    extend Extractor
    def self.names
      ['lines', 'words', 'bytes', 'ext_time', 'ext_mem']
    end

    def self.extract(content)
      arr = content.split(' ')
      qt_lines, words, bytes = arr[0], arr[1], arr[2]
      lines = content.lines.map! { | l | l.chomp! }
      [ qt_lines, words, bytes,
        Extractor.get_field(lines, 'ext_time'),
        Extractor.get_field(lines, 'ext_mem')
      ]
    end
  end

  # Sample Extractor used as example for new users of the gem.
  module TwoWordsExtractor
    extend Extractor
    # The field names of the values extracted by #extract.
    def self.names
      ['first word', 'second word', 'ext_time', 'ext_mem']
    end

    # The code that extract the values from the example commands
    # (sample_batch.rb).
    def self.extract_from_lines(lines)
      words = lines.empty? || lines[0].nil? ? ['',''] : lines[0].split().take(2)
      words << Extractor.get_field(lines, 'ext_time')
      words << Extractor.get_field(lines, 'ext_mem')
      words
    end
  end

  # Sample extractors used at https://github.com/henriquebecker91/masters,
  # where this code had its beggining. This file contains the code used to
  # extract info from the different outputs generated by UKP solving programs.

  # Extractor for the output of the run_ukp5.out program available at
  # https://github.com/henriquebecker91/masters. Not of interest for the
  # majority of the users of this gem. Kept as example, and for this gem author
  # personal use.
  module UKP5Extractor
    extend Extractor
    def self.names
      ['internal time', 'external time', 'external memory', 'opt']
    end

    def self.extract_from_lines(lines)
      ['Seconds', 'ext_time', 'ext_mem', 'opt'].map do | label |
        Extractor.get_field(lines, label)
      end
    end
  end

  # Extractor for the output of the pyasukp program available at
  # https://github.com/henriquebecker91/masters. Not of interest for the
  # majority of the users of this gem. Kept as example, and for this gem author
  # personal use.
  class PyaExtractor
    extend Extractor
    def self.names
      ['internal time', 'external time', 'external memory', 'opt']
    end

    def self.extract_from_lines(lines)
      values = ['Total Time ', 'ext_time', 'ext_mem'].map do | label |
        Extractor.get_field(lines, label)
      end
      opt_key = '#The optimal value for the given capacity'
      values << Extractor.get_hfield(lines, opt_key)
    end
  end
end
