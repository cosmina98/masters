# This file contains the code used to extract info from the different outputs
# generated by UKP solving programs.

class Extractor
  # For when there's a field whose value is after '<field>: '.
  def self.get_field(lines, field)
    lines.grep(/^#{field}: .*/).each { | l | return l.match(/:[\t ]+(.*)/)[1] }
  end

  # For when there's a field whose value is in the next line.
  def self.get_hfield(lines, field)
    lines[lines.find_index(field) + 1]
  end

  # Return the field names for each of the elements returned by
  # extract. Ex.: ['Time', 'Max Mem Use', 'opt', ... ]
  def names
    fail 'This method should have been overwritten by a subclass.'
  end

  def extract(content)
    extract_from_lines(content.lines.map! { | l | l.chomp! })
  end

  # Extract an array of values from the command output. This array has the same
  # size as the one returned by field_names.
  def extract_from_lines(lines)
    fail 'This method should have been overwritten by a subclass.'
  end
end

class UKP5Extractor < Extractor
  def names 
    ['internal time', 'external time', 'external memory', 'opt']
  end

  def extract_from_lines(lines)
    ['Seconds', 'ext_time', 'ext_mem', 'opt'].map do | label |
      Extractor.get_field(lines, label)
    end
  end
end

class PyaExtractor< Extractor
  def names 
    ['internal time', 'external time', 'external memory', 'opt']
  end

  def extract_from_lines(lines)
    values = ['Total Time ', 'ext_time', 'ext_mem'].map do | label |
      Extractor.get_field(lines, label)
    end
    opt_key = '#The optimal value for the given capacity'
    values << Extractor.get_hfield(lines, opt_key)
  end
end

