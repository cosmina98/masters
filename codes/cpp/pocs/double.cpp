#include <iostream>
#include <cmath>
#include <cstdio>

#ifndef PRINT
  #define PRINT(var) cout << #var ": " << var << endl
#endif

using namespace std;

inline void from_string(const string& s, double& d)
{
  sscanf(s.c_str(), "%lA", &d);
}

// Checking the double representation
int main (void) {
  cout << hexfloat;
  PRINT(ldexp(1.0, 40));
  PRINT(67108864.0);
  PRINT(0.0000001);
  PRINT(0.1111111);
  PRINT(ldexp(1.0, 40) * 67108864.0);
  PRINT(ldexp(1.0, 40) * 0.0000001);
  PRINT(static_cast<size_t>(ldexp(1.0, 40) * 0.0000001));
  PRINT(ldexp(1.0, 40) * 0.1111111);
  PRINT(static_cast<size_t>(ldexp(1.0, 40) * 0.1111111));
  // 0X1.2BD7E1CB5AB1P-4 - smallest item profit between all the pricings
  // generated by executing the column generation over instance
  // BPP_1000_1000_0.1_0.7_0.csp (eqv: 0.0732039)
  PRINT(static_cast<size_t>(ldexp(1.0, 40) * 0.0732039));
  // The highest item profit value found was 1.0, so 2^26 is the highest
  // value when converted to integer, and as rarely the objective function
  // reachs 2, this seem to be a very safe margin.
  PRINT(1.0 + ldexp(1.0, -40));
  double a, b, c;
  from_string("0X1.5555555555555P-3", a);
  from_string("0X1P-1", b);
  from_string("0X1P+0", c);
  PRINT(a);
  PRINT(b);
  PRINT(c);
  PRINT(a + b + c);
  PRINT(c + b + a);
}

