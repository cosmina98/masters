#!/bin/bash

# Tries to create instances similar to the one used on 5.2.2. "Instances
# known to be difficult for B&B" of the article "A hybrid algorithm for
# the unbounded knapsack problem"

# RANDOM SEED ISNT USED BY THIS FORMULA, ALL 20 INSTANCES OF SAME a+n+wmin
# ARE EQUAL, EXCEPT BY THE C

# The set of wmins used depend on n
wmins_1=(10000 15000 50000)
wmins_2=(10000 50000 110000)

ns=(5000 10000)
alphas=(-5 5)

# In the table is said that are 20 instances by line, and are 12 lines,
# 6 lines with n = 5000, and 6 lines with n = 10000, we therefore need
# 120 values between 205000 and 1005000; and 120 values between 2010000
# and 10010000
c_n5=(
530995 604335 438699 257637 991316 717770 402718 963032 275536 205651
386465 848128 898019 212325 863370 526251 969942 893330 416705 650293
922756 322555 417140 422281 754673 789511 488919 995635 505856 511878
745777 768341 509929 997532 936739 803240 348229 451999 640917 691037
949215 900576 654686 903289 323235 757629 551666 939978 968053 824959
578741 603967 356906 733223 850585 717577 296131 584281 796792 777668
591952 233254 415801 591242 836118 734263 236497 766454 961321 732642
722476 505569 882034 252615 249096 355844 649237 884534 768641 364379
262128 445950 489488 1002205 851013 666137 844846 294507 442544 535205
306291 700920 853444 414384 668967 319624 446304 520134 729223 371003
415081 372017 507493 293625 761854 786357 825836 937137 304388 638190
635572 690602 743860 820623 758481 266982 522915 768256 892843 824446
)
c_n5c=0
c_n10=(
6597874 5766266 6653274 9925829 4794802 2804983 6910087 9986840 7333555 8296605
9549211 9371285 4476851 2131079 8631040 6481667 7075896 3113635 7595045 7418686
9996682 6479362 7442103 2088141 4929152 2181348 7181498 8373550 6499241 9968330
9840568 8441994 7469477 8304533 9212648 9789593 9359281 6880209 4318961 4193065
3949309 4997908 6684804 6793685 2294764 3507099 9426227 3733781 7888688 9008057
3224830 4365927 5494909 8463156 6215034 6113396 6388587 9492344 7410315 4187759
6020768 8848039 7547243 2791665 8803923 8770844 4674497 7974928 8993557 7603842
8957104 9590518 4402690 6391754 6261108 4279595 2396292 6726204 7262586 2075673
8309846 5131237 6302428 2835653 2098619 7108973 7602756 9586441 6198992 8764695
5869004 7274445 2951438 2496273 7571788 3961431 9958129 8488935 9647665 8841826
4498489 9021988 9318995 7107047 3213842 7174337 3106384 7596518 5852210 6690757
2173413 5277276 5660160 8133666 7719869 4453626 8464065 9283705 8666935 3875453
)
c_n10c=0
for alpha in ${alphas[@]}; do
	for n in ${ns[@]}; do
		if (($n == 5000)); then
			c=${c_n5[c_n5c]}
			for wmin in ${wmins_1[@]}; do
				for i in `seq 0 19`; do
					pyasukp -nosolve -form chung -save "sc_a${alpha}n${n}wmin${wmin}-${i}-c${c}.ukp" -step $alpha -n $n -wmin $wmin -cap $c
					c_n5c=`expr $c_n5c + 1`
				done
			done
		fi
		if (($n == 10000)); then
			c=${c_n10[c_n10c]}
			for wmin in ${wmins_2[@]}; do
				for i in `seq 0 19`; do
					pyasukp -nosolve -form chung -save "sc_a${alpha}n${n}wmin${wmin}-${i}-c${c}.ukp" -step $alpha -n $n -wmin $wmin -cap $c
					c_n10c=`expr $c_n10c + 1`
				done
			done
		fi
	done
done

