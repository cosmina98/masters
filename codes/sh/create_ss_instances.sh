#!/bin/bash

# Tries to recreate the instances used on Section 5.1.1.1. (SS-UKP) of the
# article "A hybrid algorithm for the unbounded knapsack problem"

wmins="100 500 1000 5000 10000"
wmaxs="50000 100000"
ns="1000 2000 5000 10000"
# Generated with random.org (most close to true random numbers possible)
# 400 values, just the necessay amount for ten instances of every combination
cs
# the ten instances with the same wmin-wmax-n combination aren't 
# supposed to have the same items, even if the capacity is
# different. Generated with random.org, values between 0 and
# 10^9 (one billion, the max allowed by random.org)
seeds=(827183242 843367405 528806317 780179313 721215008 110877071 227708629 177710744 991580855 126456688)

counter=0
for wmin in $wmins; do
	for wmax in $wmaxs; do
		for n in $ns; do
			for i in `seq 0 9`; do
				pyasukp -nosolve -form ss -save "wmin${wmin}wmax${wmax}n${n}-${i}-s${seeds[i]}c${cs[$counter]}" -seed ${seeds[$i]} -cap ${cs[$counter]} -wmin $wmin -wmax $wmax -n $n
				counter=$counter+1
			done
		done
	done
done

