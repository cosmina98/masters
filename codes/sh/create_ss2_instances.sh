#!/bin/bash

# Tries to create instances similar to the one used on Section 5.1.1.1.
# (SS-UKP) of the article "A hybrid algorithm for the unbounded knapsack
# problem", but harder (values are increased)

wmins="1000 5000 10000 50000 100000"
wmaxs="500000 1000000"
ns="10000 20000 50000 100000"
# Generated with random.org (most close to true random numbers possible)
# 400 values, just the necessay amount for ten instances of every combination
# values between 5*10^6~10^7 (ten times as the original article)
cs=(7053974 7086967 6582099 6374688 8581351 8239505 9521889 5484900 9017093 8432099 7166489 9734370 6362627 8969373 5426632 5748492 8761664 7661029 8888252 6706086 5970156 9594852 6793898 5573008 9143057 6987881 7098209 5763836 5126669 5491694 7620920 7348982 7250302 7571075 8171746 8303727 6737676 7068824 8976007 5075685 7523725 9532908 7919747 9798340 7652591 8668525 6668094 6436205 7280148 9059572 7601647 9867662 7265134 6724480 9803497 5751961 9226178 9213556 5371100 6731213 7944993 7064870 9933736 9711715 8547122 6644325 6992465 9919602 8904413 7725611 7949644 7260154 9857431 9635417 7855415 8628574 5714441 6639938 9927975 6021657 5167895 8026498 6049764 8145215 6521493 9544190 9399032 6303581 7476595 5967640 7213812 9091579 6511921 6599432 8466040 8773767 8759769 6374152 6794358 5750768 8053326 5119452 5804085 6913914 8346827 6806088 9241273 8178070 9264524 7959750 6193291 7218555 5548039 6947160 8428519 8707973 7385954 6272106 8490598 5843362 8790453 9977503 6703936 5534208 9330585 9613324 5186264 9001705 9304111 5145104 7454549 7998653 7151047 7975198 6549045 9599783 8115981 8602115 8064086 7940477 8321795 8049384 9984576 8811971 5146959 5823883 5764098 8913879 8787320 8047222 8821306 7933442 8104695 8935296 7051771 9317578 7372757 5667253 6782529 5577842 8822301 6385051 8591328 6302070 7850767 9821245 8699695 8673946 5508152 7120687 7923045 9001600 6527891 8090683 6851985 8774819 7805759 9332308 9728635 5940304 6712851 8291694 8398362 8190313 7445609 5459305 8467548 7849345 9658204 7790082 8628995 8300531 8449003 7579982 5527496 7324523 9001498 6881787 7924401 7780875 6088006 5143215 5616210 9414924 5934995 8081024 8354146 9761690 9910764 8751564 8417603 5404203 7719762 6114560 6235406 6129130 5795289 6349166 5663171 6624986 6373385 6690241 6274012 8835643 5488950 7632255 6359014 9223861 5741932 6303775 9661788 9941261 6827352 7411770 8591530 7877976 9541389 5169265 6376994 5106568 5448462 6636621 9789819 6463990 9658269 6496143 9080551 6811444 8640008 8846072 9608074 8352496 5356067 9646607 7122103 5054794 9580585 8106583 6449790 8722171 8208267 8017460 8294420 9601161 9260285 8730975 5604087 8212590 9363674 8041112 8206021 6552822 7006308 7299273 7749816 9264056 8731096 8735124 5019366 6144577 6721457 7990166 9584409 7306233 8409387 8407768 9447477 8778552 5050915 9298006 7587102 9276533 5257943 6203981 5185436 9521211 9014326 8534173 8677790 5062577 9635014 6203902 6107266 8602993 5098265 8048833 8635351 8533799 6886377 9703050 9151889 8035184 8085387 6000935 6687096 6689288 5293440 9140478 7221334 9200490 6386298 9396463 6664243 8698706 7695402 5607406 6166782 7866734 6827358 7699000 7127247 6535045 9883612 8289057 8974925 6724224 5589947 6507449 6901358 9711964 9460010 9114174 5171078 8865909 6840825 6291545 5383536 7610484 6988739 5817019 6445610 7453273 5026805 5957947 5392939 6028911 6134021 8178471 6717334 5482205 8590109 9823590 9869067 8629250 7136910 6459412 9211375 9999614 8487765 8117372 5977860 8281874 5753656 9830532 9947444 7223736 5564950 5691642 8563122 9319115 8631812 6537152 6020154 7801078 9739684 8754198 6095921 5775002 7632172 7779740 7023986 5761519 9676334 7805226 5743225 9041585 8504831 9575550 5891284 5484996)
# the ten instances with the same wmin-wmax-n combination aren't 
# supposed to have the same items, even if the capacity is
# different. Generated with random.org, values between 0 and
# 10^9 (one billion, the max allowed by random.org)
seeds=(827183242 843367405 528806317 780179313 721215008 110877071 227708629 177710744 991580855 126456688)

for wmin in $wmins; do
	for wmax in $wmaxs; do
		for n in $ns; do
			for i in `seq 0 9`; do
				pyasukp -nosolve -form ss -save "ss2_wmin${wmin}wmax${wmax}n${n}-${i}-s${seeds[i]}c${cs[$counter]}.ukp" -seed ${seeds[$i]} -cap ${cs[$counter]} -wmin $wmin -wmax $wmax -n $n
				counter=$counter+1
			done
		done
	done
done

